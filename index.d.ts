/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** The maximum supported version of the DAVE protocol. */
export const DAVE_PROTOCOL_VERSION: number
export const enum ProposalsOperationType {
  APPEND = 0,
  REVOKE = 1
}
export const enum SessionStatus {
  INACTIVE = 0,
  PENDING = 1,
  AWAITING_RESPONSE = 2,
  ACTIVE = 3
}
export interface ProposalsResult {
  commit?: Buffer
  welcome?: Buffer
}
/**
 * Generate a key fingerprint.
 * @see https://daveprotocol.com/#verification-fingerprint
 */
export declare function generateKeyFingerprint(version: number, key: Buffer, userId: string): Buffer
/**
 * Generate a pairwise fingerprint.
 * @see https://daveprotocol.com/#verification-fingerprint
 */
export declare function generatePairwiseFingerprint(version: number, keyA: Buffer, userIdA: string, keyB: Buffer, userIdB: string): Promise<Buffer>
/**
 * Generate a displayable code.
 * @see https://daveprotocol.com/#displayable-codes
 */
export declare function generateDisplayableCode(data: Buffer, desiredLength: number, groupSize: number): string
export interface SigningKeyPair {
  private: Buffer
  public: Buffer
}
export declare function generateSigningKeys(ciphersuite: number): SigningKeyPair
export type DaveSession = DAVESession
export declare class DAVESession {
  /**
   * @param protocolVersion The protocol version to use.
   * @param userId The user ID of the session.
   * @param channelId The channel ID of the session.
   */
  constructor(protocolVersion: number, userId: string, channelId: string)
  /**
   * Resets and re-initializes the session.
   * @param protocolVersion The protocol version to use.
   * @param userId The user ID of the session.
   * @param channelId The channel ID of the session.
   */
  reinit(protocolVersion: number, userId: string, channelId: string): void
  /**
   * Resets the session by deleting the group and clearing the storage.
   * If you want to re-initialize the session, use {@link reinit}.
   */
  reset(): void
  /** The DAVE protocol version used for this session. */
  get protocolVersion(): number
  /** The user ID for this session. */
  get userId(): string
  /** The channel ID (group ID in MLS standards) for this session. */
  get channelId(): string
  /** The ciphersuite being used in this session. */
  get ciphersuite(): number
  /** The status of this session. */
  get status(): SessionStatus
  /** Whether this session's group was created. */
  get groupCreated(): boolean
  /** Get the epoch authenticator of this session's group. */
  getEpochAuthenticator(): Buffer
  /**
   * Set the external sender this session will recieve from.
   * @param externalSenderData The serialized external sender data.
   * @throws Will throw if the external sender is invalid, or if the group has been established already.
   * @see https://daveprotocol.com/#dave_mls_external_sender_package-25
   */
  setExternalSender(externalSenderData: Buffer): void
  /**
   * Create, store, and return the serialized key package buffer.
   * Key packages are not meant to be reused, and will be recreated on each call of this function.
   */
  getSerializedKeyPackage(): Buffer
  /**
   * Process proposals from an opcode 27 payload.
   * @param operationType The operation type of the proposals.
   * @param proposals The vector of proposals or proposal refs of the payload. (depending on operation type)
   * @returns A commit (if there were queued proposals) and a welcome (if a member was added) that should be used to send an [opcode 28: dave_mls_commit_welcome](https://daveprotocol.com/#dave_mls_commit_welcome-28) ONLY if a commit was returned.
   * @see https://daveprotocol.com/#dave_mls_proposals-27
   */
  processProposals(operationType: ProposalsOperationType, proposals: Buffer): ProposalsResult
  /**
   * Process a welcome message.
   * @param welcome The welcome message to process.
   * @see https://daveprotocol.com/#dave_mls_welcome-30
   */
  processWelcome(welcome: Buffer): void
  /**
   * Process a commit.
   * @param commit The commit to process.
   * @see https://daveprotocol.com/#dave_mls_announce_commit_transition-29
   */
  processCommit(commit: Buffer): void
  /**
   * Get the Voice Privacy Code of the session.
   * This is the equivalent of `generateDisplayableCode(epochAuthenticator, 30, 5)`.
   * @see https://daveprotocol.com/#displayable-codes
   */
  getVoicePrivacyCode(): string
  /**
   * Get the verification code of another member of the group.
   * This is the equivalent of `generateDisplayableCode(getPairwiseFingerprint(0, userId), 45, 5)`.
   * @see https://daveprotocol.com/#displayable-codes
   */
  getVerificationCode(userId: string): Promise<Buffer>
  /**
   * Create a pairwise fingerprint of you and another member.
   * @see https://daveprotocol.com/#verification-fingerprint
   */
  getPairwiseFingerprint(version: number, userId: string): Promise<Buffer>
  /** The amount of items in memory storage. */
  get itemsInStorage(): number
  /** @ignore */
  toString(): string
}
