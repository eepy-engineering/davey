/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const MAX_DAVE_PROTOCOL_VERSION: number
export const enum ProposalsOperationType {
  APPEND = 0,
  REVOKE = 1
}
export interface ProposalsResult {
  commit: Buffer
  welcome?: Buffer
}
export declare function generateKeyFingerprint(version: number, key: Buffer, userId: string): Buffer
export declare function generatePairwiseFingerprint(version: number, keyA: Buffer, userIdA: string, keyB: Buffer, userIdB: string): Promise<Buffer>
export interface SigningKeyPair {
  private: Buffer
  public: Buffer
}
export declare function generateSigningKeys(ciphersuite: number): SigningKeyPair
export type DaveSession = DAVESession
export declare class DAVESession {
  constructor(protocolVersion: number, userId: string, channelId: string)
  /** The DAVE protocol version used for this session. */
  get protocolVersion(): number
  /** The user ID for this session. */
  get userId(): string
  /** The channel ID (group ID in MLS standards) for this session. */
  get channelId(): string
  /** The ciphersuite being used in this session. */
  get ciphersuite(): number
  /**
   * Set the external sender this session will recieve from.
   * @param externalSenderData The serialized external sender data.
   * @throws Will throw if the external sender is invalid.
   * @see https://daveprotocol.com/#dave_mls_external_sender_package-25
   */
  setExternalSender(externalSenderData: Buffer): void
  /**
   * Create and return the serialized key package buffer.
   * Key packages are not meant to be reused, and will be recreated on each call of this function.
   */
  getSerializedKeyPackage(): Buffer
  /**
   * Create a pending group that may recieve proposals.
   * You must use {@link getSerializedKeyPackage} and {@link setExternalSender} before using this function.
   */
  createPendingGroup(): void
  /**
   * Process proposals from an opcode 27 payload.
   * @param operationType The operation type of the proposals.
   * @param proposals The vector of proposals or proposal refs of the payload. (depending on operation type)
   * @see https://daveprotocol.com/#dave_mls_proposals-27
   */
  processProposals(operationType: ProposalsOperationType, proposals: Buffer): ProposalsResult
  /**
   * Process a welcome message.
   * @param welcome The welcome message to process.
   * @see https://daveprotocol.com/#dave_mls_proposals-30
   */
  processWelcome(welcome: Buffer): void
  /**
   * Process a commit.
   * @param commit The commit to process.
   * @see https://daveprotocol.com/#dave_mls_proposals-29
   */
  processCommit(commit: Buffer): void
  /**
   * Create a pairwise fingerprint of you and another member.
   * @see https://daveprotocol.com/#verification-fingerprint
   */
  getPairwiseFingerprint(version: number, userId: string): Promise<Buffer>
  get itemsInStorage(): number
  /** @ignore */
  toString(): string
}
